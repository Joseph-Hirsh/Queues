import java.util.Iterator;
import java.util.Random;

public class RandomizedQueue<Item> implements Iterable<Item> {
    public Item[] queue;
    public int arraySize;
    public int queueSize;
    public int tail;
    // construct an empty randomized queue
    public RandomizedQueue() {
        queue = (Item[]) new Object[2];
        arraySize = 0;
        queueSize = 0;
        tail = 0;
    }
    // is the randomized queue empty
    public boolean isEmpty() {
        return queue == null;
    }
    // return the number of items on the randomized queue
    public int size() {
        return queueSize;
    }
    // resize the queue
    public void resize(int newSize) {
    	//we should be able to get rid of the oldArraySize variable
        int oldArraySize = arraySize;
        arraySize = newSize;
        Item[] temporary = (Item[]) new Object[arraySize];
        int nextOpen = 0;

        for (int i = 0; i < oldArraySize; i++) {
            if (queue[i] != null) {
                temporary[nextOpen] = queue[i];
                nextOpen++;
            }
            queue = temporary;
            tail = queueSize;
        }
    }
    // add the item
    public void enqueue(Item item) {
        if (tail == arraySize) {
            resize(arraySize);
        }

        queue[tail] = item;
        tail++;
    }
    // remove and return a random item
    public Item dequeue() {
        Random randomizer = new Random();
        int itemIndex;
        do {
            itemIndex = randomizer.nextInt(queueSize);
        } while ((queue[itemIndex] == null));
        Item itemReturn = queue[itemIndex];
        queue[itemIndex] = null;

        if(tail <= arraySize / 4){
            resize(arraySize/2);
        }

        return itemReturn;
    }
    // return a random item (but do not remove it)
    public Item sample() {
        Random randomizer = new Random();
        int item;
        do {
            item = randomizer.nextInt(queueSize);
        } while ((queue[item] == null));
        return queue[item];
    }
    // return an independent iterator over items in random order
    @Override
    public Iterator<Item> iterator(){
    	return new rqIterator();
    }
    
    private class rqIterator implements Iterator {
        private Item current = queue[0];
        private int index = 0;
        public boolean hasNext() {
           if(arraySize != tail){
               resize(tail);
           } 
           return (current != null);
            
       }
       public Item next() {
           Item item = current;
           current = queue[++index];
           return item;
    	   
       }
    }
    // unit testing
    public static void main(String[] args) {
    	RandomizedQueue<Character> tester = new RandomizedQueue<Character>();
    	tester.enqueue('A');
    	tester.enqueue('B');
    	tester.enqueue('C');
    	tester.enqueue('D');
    	System.out.print("Tester is: ");
    	for(char c : tester) {
    		System.out.print(c + ", ");
    	}
    	System.out.println();
    	System.out.println(tester.dequeue());
    	System.out.println(tester.dequeue());
    	System.out.println(tester.dequeue());
    	System.out.println(tester.dequeue());
    	System.out.print("Tester is: ");
    	for(char c : tester) {
    		System.out.print(c + ", ");
    	}
    	
    }

}
