import java.sql.Array;
import java.util.Iterator;
import java.util.Random;

public class RandomizedQueue<Item> implements Iterable<Item> {
    public Item[] queue;
    public int arraySize;
    public int tail;
    // construct an empty randomized queue
    public RandomizedQueue() {
        queue = (Item[]) new Object[2];
        arraySize = 2;
        tail = 0;
    }
    // is the randomized queue empty
    public boolean isEmpty() {
        return queue == null;
    }
    // return the number of items on the randomized queue
    public int size() {
        return tail;
    }
    // resize the queue
    public void resize(int newSize) {
        //we should be able to get rid of the oldArraySize variable
        Item[] temporary = (Item[]) new Object[newSize];

        for (int i = 0; i < tail; i++) {
            temporary[i] = queue[i];
        }
        queue = temporary;
        arraySize = newSize;
    }
    // add the item
    public void enqueue(Item item) {
        if (tail == arraySize) {
            resize(arraySize * 2);
        }
        queue[tail] = item;
        tail++;
    }
    // remove and return a random item
    public Item dequeue() {
        Random randomizer = new Random();
        int itemIndex;
        itemIndex = randomizer.nextInt(tail);
        
        Item itemReturn = queue[itemIndex];
        queue[itemIndex] = queue[tail-1];
        queue[tail-1] = null;
        if(tail <= arraySize / 4){
            resize(arraySize/2);
        }
        tail --;
        return itemReturn;
    }
    // return a random item (but do not remove it)
    public Item sample() {
        Random randomizer = new Random();
        return queue[randomizer.nextInt(tail)];
    }
    // return an independent iterator over items in random order
    @Override
    public Iterator<Item> iterator(){

    	return new rqIterator();
    }

    private class rqIterator implements Iterator {
        private int index = 0;
      
        public boolean hasNext() {
            return index < tail;
        }
        public Item next() {
            Item item = queue[index];
            index++;
            return item;

        }
    }
    // unit testing
    public static void main(String[] args) {
        RandomizedQueue<Character> tester = new RandomizedQueue<Character>();
        tester.enqueue('A');
        tester.enqueue('B');
        tester.enqueue('C');
        tester.enqueue('D');
        System.out.print("Tester is: ");
        System.out.println();
        for (char c : tester) {
            System.out.print(c + ", ");
        }
        System.out.println();
        System.out.println();
        System.out.print("4 samples are: ");
        System.out.println();
        for (int i = 0; i < 4; i++) {
            System.out.print(tester.sample() + ", ");
        }
        System.out.println();
        System.out.println(tester.dequeue());
        System.out.println(tester.dequeue());
        System.out.println(tester.dequeue());
        System.out.println(tester.dequeue());
        System.out.print("Tester is: ");
        for(char c : tester) {
            System.out.print(c + ", ");
        }

    }

}
