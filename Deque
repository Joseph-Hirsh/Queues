import java.util.Iterator;

public class Deque<Item> implements Iterable<Item> {

    private Node first;
    private Node last;
    private int size;

    private class Node {
        Item item;
        Node next;
        Node previous;
    }

    // construct an empty deque
    public Deque() {
        first = null;
        last = null;
        size = 0;
    }

    // is the deque empty?
    public boolean isEmpty() {
        return (first == null);
    }

    public int size() {
        return size;
    }

    // add the item to the front
    public void addFirst(Item item) {
        if (isEmpty()) {
            first = new Node();
            last = first;
        } else {
            Node oldFirst = first;
            first = new Node();
            first.next = oldFirst;
        }

        first.item = item;
        first.previous = null;
        size++;
    }

    // add the item to the back
    public void addLast(Item item) {
        if(isEmpty()) {
            last = new Node();
            first = last;
            last.previous = null;
        } else {
            Node oldLast = last;
            last = new Node();
            oldLast.next = last;
            last.previous = oldLast;
        }

        last.item = item;
        size++;
    }

    // remove and return the item from the front
    public Item removeFirst() {
        Item item = first.item;

        if (size == 1) {
            first = null;
        } else if (size == 2){
            first = first.next;
            last = first;
            first.previous = null;
        } else {
            first = first.next;
            first.previous = null;
        }


        size--;
        return item;
    }

    // remove and return the item from the back
    public Item removeLast() {
        Item item = last.item;

        if (size == 1) {
            last = null;
        } else if (size == 2){
            last = first;
            last.next = null;
        } else {
            last = last.previous;
            last.next = null;
        }

        size--;
        return item;

    }

    // return an iterator over items in order from front to back
    public Iterator<Item> iterator() {
        return new DequeIterator();
    }

    private class DequeIterator implements Iterator {
        private Node current = first;
        public boolean hasNext() {
            return current != null;
        }
        public Item next() {
            Item item = current.item;
            current = current.next;
            return item;
        }
    }

    // unit testing (required)
    public static void main(String[] args) {
        Deque<Character> deque = new Deque<Character>();

        deque.addFirst('a');
        deque.addLast('b');
        deque.addLast('c');
        deque.addLast('d');
        deque.addFirst('1');

        for (Character c: deque) {
            System.out.println(c);
        }
        
        System.out.println("[+] Finished deque");
        
        System.out.println(deque.removeLast());
        System.out.println(deque.removeFirst());
        
        System.out.println("[+] Finished removal");
        
        for (Character c: deque) {
            System.out.println(c);
        }

    }
}
